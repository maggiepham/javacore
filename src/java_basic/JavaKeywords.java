package java_basic;

public class JavaKeywords {
	/*
	 * abstract : is used to declared an abstract class.
	 * boolean : is used to declared a variable as a boolean type with TRUE and FALSE values
	 * break : is used to break the current flow of the loop or switch statement
	 * byte : is used to declared a variable that can hold 8-bit data values
	 * case : is used with the switch statement to mark blocks of text
	 * catch : is used to catch the exceptions generated by statements. It must be used after the try block only
	 * char : is used to declare a variable that can hold unsigned 16-bit Unicode characters
	 * class : is used to declare a class
	 * continue : is used to continue the loop. It continues the currect flow and skips the remaining code at the specified condition
	 * default : is used to specify the default block of code in a switch statement
	 * do : is used in the control statement to declare a loop
	 * double : is used to declare a variable that can hod 64-bit floating-point number
	 * else : is used to indicate the alternative bracnches in an it statement
	 * enum : is used to define a fixed set of constant. Enum constructors are always private or default
	 * extends : is used to indicate that a class is inherited from another class or interface
	 * final : is used to indicate that (de chi ra rang) a variable holds a constant value(gia tri khong doi). It's used with a variable to restrict (han che) the user from updating the value of the variable
	 * finally : indicates a block of code in a try-catch structure, it's executed an exception or not
	 * float : is used to declare a variable that can hold a 32-bit floating-point number
	 * for : is used to start a loop, it executes a set of instructions/functions repeatedly when some condition becomes true
	 * if : test the condition by execution the if block if the condition is true
	 * implements : is used to implement an interface
	 * import : makes classes and interfaces available and accessible to the current source code
	 * instanceof : is used to test whether the object is an instance of the specified class or implements an interface
	 * int : is used to declare a variable that can hold a 32-bit signed integer
	 * interface : is used to declare an interface, it can have only abstract methods
	 * long : is used to declare a variable that can hold a 64-bit integer
	 * native : is used to specify that a method is implemented in native code using JNI (Java Native Interface)
	 * new : is used to create new objects
	 * null : is used to indecate that a reference does not refer to anything. It removes the garbage value
	 * package : is used to declare a Java package that includes the classes
	 * private : is an access modifier, used to indicate that a method or variable may be accessed only in the class in which it is declared
	 * protected : is an access modifier, can be accessible within the package and outside the package but through inheritance only
	 * public : is an access modifier,used to indicate that an item is accessible anywhere 
	 * return : is used to return from a method when its execution is complete
	 * short : is used to declare a variable that can hold a 16-bit integer
	 * static : is used to indicate that a variable or method is a class method, it's used for memory management
	 * stricfp : is used to restrict the floating-point calculations to ensure portability
	 * super : is a reference variable that is used to reer to parent class objects. It can be used to invoke the immediate parent class method
	 * switch : executes code based on test value, the switch statement tests the equality of a variable against multiple values
	 * synchronized : is used to specify the critical sctions or methods in multithreaded code
	 * this : can be used to refer the current object in a method or constructor
	 * throw : can be used to explicitly throw an exception. The throw keyword is mainly used to throw custom exceptions,  it is followed by an instance
	 * thows : is used to declare an exception. Checked exception can be propagated with throws
	 * transient : is used in serialization
	 * try : is used to start a block of code that will be tested for exception. It's followed by either catch or finally block
	 * void : is used to specify that a method does not have a return value
	 * volatile : is used to indicate that a variable may change asynchronously
	 * while : is used to start a while loop.
	 */

	public static void main(String[] args) {
		
	}

}
